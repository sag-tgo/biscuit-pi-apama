/*
 * Copyright (c) 2020 Software AG, Darmstadt, Germany and/or its licensors
 * 
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with the License. You may obtain a copy of the License at
 * 
 *   http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.
 */
package com.softwareag.apama.eplclub;

/**
 * This monitor is responsible for...
 */
monitor Sensors {

    

    Config config;

    action onload() {
        on Config() as cfg {
            config := cfg;
            log "got config" at DEBUG;
            // TODO: Spawn?
            listenForLimitSensorRequests();
            listenForGyroSensorRequests();
            listenForColorSensorRequests();

            monitor.subscribe("SENSORS");
            log "monitor.subscribe(SENSORS);" at DEBUG;
        }
        monitor.subscribe(Config.SUBSCRIBE_CHANNEL);
        log "monitor.subscribe(Config.SUBSCRIBE_CHANNEL);" at DEBUG;
    }

    action listenForLimitSensorRequests() {
        on all StartPollingLimitSensor() as startEvent {
            log "Got start polling limit sensor request" at DEBUG;
            string limitSensorChannel := "Sensors_Limit";
            sequence<any> params := new sequence<any>;
            params.append(config.LIMIT_SENSOR_PORT);

            // Listen for BP action responses...
            on all BrickPiActionResult() as reading and not StopPollingLimitSensor() {
                log "Got LimitSensorReading " + reading.toString() at DEBUG;
                send LimitSensorReading(<integer>reading.value != 0) to startEvent.destChannel;
            }
            
            on all wait(startEvent.intervalSecs) and not StopPollingLimitSensor() {
                log "Requesting limit sensor reading" at DEBUG;
                send InvokeBrickPiAction("get_sensor", params, limitSensorChannel) to InvokeBrickPiAction.CHANNEL;
            }

            monitor.subscribe(limitSensorChannel);
        }
    }

    action listenForGyroSensorRequests() {
        on all StartPollingGyroSensor() as startEvent {
            log "Got start polling gyro sensor request" at DEBUG;
            string gyroSensorChannel := "Sensors_Gyro";
            sequence<any> params := new sequence<any>;
            params.append(config.GYRO_SENSOR_PORT);

            // Listen for BP action responses...
            on all BrickPiActionResult() as reading and not StopPollingGyroSensor() {
                log "Got GyroSensorReading " + reading.toString() at DEBUG;
                sequence<any> mySeq := <sequence<any>>reading.value;
                GyroSensorReading gyroReading := new GyroSensorReading;
                gyroReading.angle := <integer> mySeq[0];
                gyroReading.acceleration := <integer> mySeq[1];
                
                send gyroReading to startEvent.destChannel;
            }
            
            on all wait(startEvent.intervalSecs) and not StopPollingGyroSensor() {
                log "Requesting gyro sensor reading" at DEBUG;
                send InvokeBrickPiAction("get_sensor", params, gyroSensorChannel) to InvokeBrickPiAction.CHANNEL;
            }

            monitor.subscribe(gyroSensorChannel);
        }
    }

    action listenForColorSensorRequests() {
        on all StartPollingColorSensor() as startEvent {
            log "Got start polling color sensor request" at DEBUG;
            string colorSensorChannel := "Sensors_Color";
            sequence<any> params := new sequence<any>;
            params.append(config.COLOR_SENSOR_PORT);

            // Listen for BP action responses...
            on all BrickPiActionResult() as reading and not StopPollingColorSensor() {
                log "Got ColorSensorReading " + reading.toString() at DEBUG;
                string color := ColorSensorReading.fromInteger(<integer>reading.value);
                send ColorSensorReading(color) to startEvent.destChannel;
            }
            
            on all wait(startEvent.intervalSecs) and not StopPollingColorSensor() {
                log "Requesting limit sensor reading" at DEBUG;
                send InvokeBrickPiAction("get_sensor", params, colorSensorChannel) to InvokeBrickPiAction.CHANNEL;
            }

            monitor.subscribe(colorSensorChannel);
        }
    }

}
