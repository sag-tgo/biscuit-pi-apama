/*
 * Copyright (c) 2020 Software AG, Darmstadt, Germany and/or its licensors
 * 
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with the License. You may obtain a copy of the License at
 * 
 *   http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.
 */
package com.softwareag.apama.eplclub;

/**
 * This monitor is responsible for...
 */
monitor Sensors {

    sequence<string> colorLookup := ["?", "Black", "Blue", "Green", "Yellow", "Red", "White", "Brown"];

    Config config;

    action onload() {
        on Config() as cfg {
            config := cfg;
            log "got config" at INFO;
            listenForLimitSensorRequests();
            monitor.subscribe("SENSORS");
            log "monitor.subscribe(SENSORS);" at INFO;
        }
        monitor.subscribe(Config.SUBSCRIBE_CHANNEL);
        log "monitor.subscribe(Config.SUBSCRIBE_CHANNEL);" at INFO;

        /*on all ReadColorSensor() as evt {
            sequence<any> params := new sequence<any>;
            params.append(1);
            send InvokeBrickPiAction("get_sensor", params, ReadColorSensor.CHANNEL) to InvokeBrickPiAction.CHANNEL;
        }
        //monitor.subscribe("TEST");

        on all wait (1.0) {
            sequence<any> params := new sequence<any>;
            params.append(1);
            send InvokeBrickPiAction("get_sensor", params, ReadColorSensor.CHANNEL) to InvokeBrickPiAction.CHANNEL;
        }*/

        //spawn listenForColorSensorEvents();
        //spawn listenForLimitSensorEvents();
        //spawn listenForGyroSensorEvents();
    }

    action listenForLimitSensorRequests() {
        on all StartPollingLimitSensor() as e {
            log "Got start polling limit sensor request" at INFO;
            sequence<any> params := new sequence<any>;
            params.append(config.LIMIT_SENSOR_PORT);
                
            on all wait(e.intervalSecs) and not StopPollingLimitSensor() {
                // TODO: Listen for responses and send LimitSensorReading events?
                log "Sending BP action request" at INFO;
                send InvokeBrickPiAction("get_sensor", params, e.destChannel) to InvokeBrickPiAction.CHANNEL;
            }
        }
    }

/*
    action listenForColorSensorEvents() {
        on all BrickPiActionResult() as res {
            log "Color sensor response? " + res.toString() at INFO;
        }
        monitor.subscribe(ReadColorSensor.CHANNEL);
    }

    action listenForLimitSensorEvents() {
        on all BrickPiActionResult() as res {
            log "Limit sensor response? " + res.toString() at INFO;
        }
        monitor.subscribe("limitsensor");
    }

    action listenForGyroSensorEvents() {
        on all BrickPiActionResult() as res {
            log "Gyro sensor response? " + res.toString() at INFO;
        }
        monitor.subscribe("gyrosensor");
    }
    */
}
