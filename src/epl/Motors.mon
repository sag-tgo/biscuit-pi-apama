/*
 * Copyright (c) 2020 Software AG, Darmstadt, Germany and/or its licensors
 * 
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with the License. You may obtain a copy of the License at
 * 
 *   http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.
 */
package com.softwareag.apama.eplclub;

/**
 * This monitor is responsible for controlling EV3 motors.
 */
monitor Motors {

    Config config;

    action onload() {
        on Config() as cfg {
            config := cfg;
            log "got config" at INFO;

            context rotationMotorContext := context("rotation");
            on all StartRotationMotor() as e {
                spawn onStartRotationMotor(e) to rotationMotorContext;
            }

            context verticalMotorContext := context("vertical");
            on all StartVerticalMotor() as e {
                spawn onStartVerticalMotor(e) to rotationMotorContext;
            }

            context clawMotorContext := context("claw");
            on all StartClawMotor() as e {
                spawn onStartClawMotor(e) to clawMotorContext;
            }

            monitor.subscribe(Constants.MOTORS_CHANNEL);
        }
        monitor.subscribe(Config.SUBSCRIBE_CHANNEL);
        log "monitor.subscribe(Config.SUBSCRIBE_CHANNEL);" at INFO;
    }

    action onStartRotationMotor(StartRotationMotor startEvent) {
        log "Got start StartRotationMotor event" at INFO;
        string rotationMotorChannel := "Motor_Rotation";
        

        on BrickPiActionResult() as startAck {
            log "Rotation motor movement started" at INFO;

            // Listen for BP action responses...
            on all BrickPiActionResult() as reading and not StopRotationMotor() {
                log "Got rotation motor position " + reading.toString() at INFO;
                integer position := <integer>reading.value;
                send RotationMotorReading(<integer>reading.value) to startEvent.destChannel;
                boolean targetReached := false;
                if startEvent.targetPosRelative >= 0 {
                    if position >= (startEvent.targetPosRelative - 2) {
                        targetReached := true;
                    }
                } else if startEvent.targetPosRelative < 0 {
                    if position <= (startEvent.targetPosRelative + 2) {
                        targetReached := true;
                    }
                }

                if targetReached {
                    log "rotation target reached!" at INFO;
                    route StopRotationMotor();
                }
            }
            
            on all wait(startEvent.intervalSecs) and not StopRotationMotor() {
                log "Requesting rotation motor position" at DEBUG;
                sequence<any> params := new sequence<any>;
                params.append(config.ROTATE_MOTOR_PORT);
                send InvokeBrickPiAction("get_motor_encoder", params, rotationMotorChannel) to InvokeBrickPiAction.CHANNEL;
            }

            on StopRotationMotor() {
                log "got StopRotationMotor" at INFO;
                sequence<any> params := new sequence<any>;
                params.append(config.ROTATE_MOTOR_PORT);
                params.append(0);
                send InvokeBrickPiAction("set_motor_dps", params, rotationMotorChannel) to InvokeBrickPiAction.CHANNEL;
                die;
            }
        }
        
        sequence<any> params := new sequence<any>;
        params.append(config.ROTATE_MOTOR_PORT);
        params.append(startEvent.targetPosRelative);
        send InvokeBrickPiAction("set_motor_position_relative", params, rotationMotorChannel) to InvokeBrickPiAction.CHANNEL;
        // What happens if we change params here?

        monitor.subscribe(Constants.MOTORS_CHANNEL);  // TODO: Do we need this or is it inherited from spawning context?
        monitor.subscribe(rotationMotorChannel);
    }

    action onStartVerticalMotor(StartVerticalMotor startEvent) {
        log "Got start StartVerticalMotor event" at INFO;
        string verticalMotorChannel := "Motor_Vertical";
        

        on BrickPiActionResult() as startAck {
            log "Vertical motor movement started" at INFO;

            // Listen for BP action responses...
            on all BrickPiActionResult() as reading and not StopVerticalMotor() {
                sequence<any> seq := <sequence<any>>reading.value;
                integer flags := <integer>seq[0];
                boolean overloaded := (flags and 0x01) != 0;  // TODO: Not sure if this is working
                //log "Overloaded? " + overloaded.toString() at INFO;
                integer position := <integer>seq[2];
                //log "Got vertical motor position " + position.toString() at INFO;
                send VerticalMotorReading(position) to startEvent.destChannel;
                boolean targetReached := overloaded;
                if startEvent.targetPosRelative >= 0 {
                    if position >= (startEvent.targetPosRelative - 2) {
                        targetReached := true;
                    }
                } else if startEvent.targetPosRelative < 0 {
                    if position <= (startEvent.targetPosRelative + 2) {
                        targetReached := true;
                    }
                }

                if targetReached {
                    log "vertical target reached!" at INFO;
                    route StopVerticalMotor();
                }
            }
            
            on all wait(startEvent.intervalSecs) and not StopVerticalMotor() {
                log "Requesting vertical motor position" at DEBUG;
                sequence<any> params := new sequence<any>;
                params.append(config.VERTICAL_MOTOR_PORT);
                send InvokeBrickPiAction("get_motor_status", params, verticalMotorChannel) to InvokeBrickPiAction.CHANNEL;
            }

            on StopVerticalMotor() {
                log "got StopVerticalMotor" at INFO;
                sequence<any> params := new sequence<any>;
                params.append(config.VERTICAL_MOTOR_PORT);
                params.append(0);
                send InvokeBrickPiAction("set_motor_dps", params, verticalMotorChannel) to InvokeBrickPiAction.CHANNEL;
                die;
            }
        }
        
        sequence<any> params := new sequence<any>;
        params.append(config.VERTICAL_MOTOR_PORT);
        params.append(startEvent.targetPosRelative);
        send InvokeBrickPiAction("set_motor_position_relative", params, verticalMotorChannel) to InvokeBrickPiAction.CHANNEL;
        // What happens if we change params here?

        monitor.subscribe(Constants.MOTORS_CHANNEL);  // TODO: Do we need this or is it inherited from spawning context?
        monitor.subscribe(verticalMotorChannel);
    }

    action onStartClawMotor(StartClawMotor startEvent) {
        log "Got start StartClawMotor event" at INFO;
        string clawMotorChannel := "Motor_Claw";
        

        on BrickPiActionResult() as startAck {
            log "Claw motor movement started" at INFO;

            // Listen for BP action responses...
            on all BrickPiActionResult() as reading and not StopClawMotor() {
                //log reading.toString() at INFO;
                sequence<any> seq := <sequence<any>>reading.value;
                integer flags := <integer>seq[0];
                boolean overloaded := (flags and 0x01) != 0;  // TODO: Not sure if this is working
                //log "Overloaded? " + overloaded.toString() at INFO;
                integer position := <integer>seq[2];
                //log "Got claw motor position " + position.toString() at INFO;
                send ClawMotorReading(position) to startEvent.destChannel;
                boolean targetReached := overloaded;
                if startEvent.targetPosRelative >= 0 {
                    if position >= (startEvent.targetPosRelative - 2) {
                        targetReached := true;
                    }
                } else if startEvent.targetPosRelative < 0 {
                    if position <= (startEvent.targetPosRelative + 2) {
                        targetReached := true;
                    }
                }

                if targetReached {
                    log "claw target reached!" at INFO;
                    route StopClawMotor();
                }
            }
            
            on all wait(startEvent.intervalSecs) and not StopClawMotor() {
                log "Requesting claw motor position" at DEBUG;
                sequence<any> params := new sequence<any>;
                params.append(config.GRABBER_MOTOR_PORT);
                send InvokeBrickPiAction("get_motor_status", params, clawMotorChannel) to InvokeBrickPiAction.CHANNEL;
            }

            on StopClawMotor() {
                log "got StopClawMotor" at INFO;
                sequence<any> params := new sequence<any>;
                params.append(config.GRABBER_MOTOR_PORT);
                params.append(0);
                send InvokeBrickPiAction("set_motor_dps", params, clawMotorChannel) to InvokeBrickPiAction.CHANNEL;
                die;
            }
        }
        
        sequence<any> params := new sequence<any>;
        params.append(config.GRABBER_MOTOR_PORT);
        params.append(startEvent.targetPosRelative);
        send InvokeBrickPiAction("set_motor_position_relative", params, clawMotorChannel) to InvokeBrickPiAction.CHANNEL;
        // What happens if we change params here?

        monitor.subscribe(Constants.MOTORS_CHANNEL);  // TODO: Do we need this or is it inherited from spawning context?
        monitor.subscribe(clawMotorChannel);
    }

}
