/*
 * Copyright (c) 2020 Software AG, Darmstadt, Germany and/or its licensors
 * 
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with the License. You may obtain a copy of the License at
 * 
 *   http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.
 */
package com.softwareag.apama.eplclub;

/**
 * This monitor is responsible for controlling EV3 motors.
 */
monitor Motors {

    Config config;

    action onload() {
        on Config() as cfg {
            config := cfg;
            log "got config" at INFO;

            context rotationMotorContext := context("rotation");
            on all StartRotationMotor() as e {
                spawn onStartRotationMotor(e) to rotationMotorContext;
            }

            monitor.subscribe(Constants.MOTORS_CHANNEL);
        }
        monitor.subscribe(Config.SUBSCRIBE_CHANNEL);
        log "monitor.subscribe(Config.SUBSCRIBE_CHANNEL);" at INFO;
    }

    action onStartRotationMotor(StartRotationMotor startEvent) {
        log "Got start StartRotationMotor event" at INFO;
        string rotationMotorChannel := "Motor_Rotation";
        sequence<any> params := new sequence<any>;
        params.append(config.ROTATE_MOTOR_PORT);

        // Listen for BP action responses...
        on all BrickPiActionResult() as reading and not StopRotationMotor() {
            log "Got rotation motor position " + reading.toString() at INFO;
            send RotationMotorReading(<integer>reading.value) to startEvent.destChannel;
        }
        
        on all wait(startEvent.intervalSecs) and not StopRotationMotor() {
            log "Requesting rotation motor position" at DEBUG;
            send InvokeBrickPiAction("get_motor_encoder", params, rotationMotorChannel) to InvokeBrickPiAction.CHANNEL;
        }

        on StopRotationMotor() {
            log "got StopRotationMotor" at DEBUG;
            die;
        }

        monitor.subscribe(Constants.MOTORS_CHANNEL);  // TODO: Do we need this or is it inherited from spawning context?
        monitor.subscribe(rotationMotorChannel);
    }
}
