/*
 * Copyright (c) 2020 Software AG, Darmstadt, Germany and/or its licensors
 * 
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with the License. You may obtain a copy of the License at
 * 
 *   http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.
 */
package com.softwareag.apama.eplclub;

event MoveToHomePosition {
}

monitor RobotArm {
    
    
    action onload() {
        string myChannel := "ROBOT_ARM";

        monitor.subscribe(myChannel);
        log "monitor.subscribe(ROBOT_ARM);" at INFO;

        //send StartPollingColorSensor(2.0, myChannel) to Constants.SENSORS_CHANNEL;
        //log "sent StartPollingColorSensor" at INFO;

        //send StartPollingGyroSensor(0.5, myChannel) to Constants.SENSORS_CHANNEL;
        //log "sent StartPollingGyroSensor" at INFO;

        //send StartRotationMotor(50, 0.1, myChannel) to Constants.MOTORS_CHANNEL;
        //log "sent StartRotationMotor" at INFO;

        on all MoveToHomePosition() {
            on LimitSensorReading() as e {
                // First limit sensor reading, if not pressed start moving arm.
                if not e.value {
                    // 360 = 1 whole rotation (the furthest it can possibly be from "home")
                    // *3 because the gear ratio is 36:12 (or 3:1) - three complete 
                    // rotations of the motor to one of the arm.
                    send StartRotationMotor(360 * 3, 0.1, myChannel) to Constants.MOTORS_CHANNEL;
                    log "sent StartRotationMotor" at INFO;
                }
            }

            on LimitSensorReading(value=true) as e {
                log "limit sensor hit! Stopping motor & limit sensor polling..." at INFO;
                send StopRotationMotor() to Constants.MOTORS_CHANNEL;
                send StopPollingLimitSensor() to Constants.SENSORS_CHANNEL;
                // Reset motor encoder position?
            }

            send StartPollingLimitSensor(0.05, myChannel) to Constants.SENSORS_CHANNEL;
            log "sent StartPollingLimitSensor" at INFO;

            //send StartVerticalMotor(-19 * 5, 0.1, myChannel) to Constants.MOTORS_CHANNEL;
        }

        route MoveToHomePosition();

        on all ColorSensorReading() as e {
            log e.toString() at INFO;
        }

        on all GyroSensorReading() as e {
            log e.toString() at INFO;
        }

        on all RotationMotorReading() as e {
            log e.toString() at INFO;
        }
        
        /*
        on wait(5.0) {
            send StopPollingLimitSensor() to Constants.SENSORS_CHANNEL;
            send StopPollingGyroSensor() to Constants.SENSORS_CHANNEL;
            send StopRotationMotor() to Constants.MOTORS_CHANNEL;
        }
        */
    }
}
