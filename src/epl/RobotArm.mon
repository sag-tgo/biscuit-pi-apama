/*
 * Copyright (c) 2020 Software AG, Darmstadt, Germany and/or its licensors
 * 
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with the License. You may obtain a copy of the License at
 * 
 *   http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.
 */
package com.softwareag.apama.eplclub;

event StartCalibration {
}

event ArmVerticalTargetReached {
}

event ArmRotationTargetReached {
}

event GrabberTargetReached {
    integer steps;
}

event GrabberCalibrated {
    integer closePosition;
}

/**
 * 
 */
monitor RobotArm {
    
    constant string CHANNEL := "ROBOT_ARM";
    
    action onload() {
        monitor.subscribe(CHANNEL);
        log "monitor.subscribe(ROBOT_ARM);" at INFO;

        //send StartPollingColorSensor(2.0, CHANNEL) to Constants.SENSORS_CHANNEL;
        //log "sent StartPollingColorSensor" at INFO;

        on all StartCalibration() {
            monitor.subscribe(Constants.MOTORS_CHANNEL);

            startRotationCalibration();
            startVerticalCalibration();
            startGrabberCalibration();
            

            on ArmRotationTargetReached() 
                and ArmVerticalTargetReached()
                and GrabberCalibrated()
            {
                log "Calibrated" at INFO;
                // TODO: reset motor encoders to 0
                // TODO: Listen for colour sensor change events (? -> colour)
            }
        }

        route StartCalibration();

        on all ColorSensorReading() as e {
            log e.toString() at INFO;
        }
    }

    /**
     *
     */
    action startRotationCalibration() {
        on LimitSensorReading() as e {
            // First limit sensor reading, if not pressed start moving arm.
            if not e.value {
                // 360 = 1 whole rotation (the furthest it can possibly be from "home")
                // *3 because the gear ratio is 36:12 (or 3:1) - three complete 
                // rotations of the motor to one of the arm.
                send StartRotationMotor(360 * 3, 0.1, CHANNEL) to Constants.MOTORS_CHANNEL;
                log "sent StartRotationMotor" at INFO;
            }
        }

        on LimitSensorReading(value=true) as e {
            log "limit sensor hit! Stopping motor & limit sensor polling..." at INFO;
            send StopRotationMotor() to Constants.MOTORS_CHANNEL;
            send StopPollingLimitSensor() to Constants.SENSORS_CHANNEL;
            // Reset motor encoder position?
            route ArmRotationTargetReached();
        }

        send StartPollingLimitSensor(0.05, CHANNEL) to Constants.SENSORS_CHANNEL;
        log "sent StartPollingLimitSensor" at INFO;
    }

    /**
     *
     */
    action startVerticalCalibration() {
        send StartPollingGyroSensor(0.1, CHANNEL) to Constants.SENSORS_CHANNEL;
        log "sent StartPollingGyroSensor" at INFO;

        send StartVerticalMotor(90 * 5, 0.1, CHANNEL) to Constants.MOTORS_CHANNEL;

        // 0.5 second with no change in reading... stop!
        on all VerticalMotorReading() as reading and not ArmVerticalTargetReached() {
            log "got VerticalMotorReading: " + reading.toString() at INFO;
            on VerticalMotorReading(position=reading.position) 
                    -> VerticalMotorReading(position=reading.position) within(0.5) {
                log "ArmVerticalTargetReached from motor readings" at INFO;
                route ArmVerticalTargetReached();
            } // may create quite a number of listeners?
        }

        on ArmVerticalTargetReached() {
            log "ArmVerticalTargetReached" at INFO;
            send StopVerticalMotor() to Constants.MOTORS_CHANNEL;
            send StopPollingGyroSensor() to Constants.SENSORS_CHANNEL;
            // Move arm back up
            on wait (1.0) {

                on ArmVerticalTargetReached() {
                    send StopVerticalMotor() to Constants.MOTORS_CHANNEL;
                    log "Arm vertical calibrated" at INFO;
                }

                on all VerticalMotorReading() as reading and not ArmVerticalTargetReached() {
                    log "*** got VerticalMotorReading: " + reading.toString() at INFO;
                    on VerticalMotorReading(position=reading.position) 
                            -> VerticalMotorReading(position=reading.position) within(0.5) {
                        log "*** ArmVerticalTargetReached from motor readings" at INFO;
                        route ArmVerticalTargetReached();
                    } // may create quite a number of listeners?
                }

                send StartVerticalMotor(-45 * 5, 0.1, CHANNEL) to Constants.MOTORS_CHANNEL;
            }
        }

        on all GyroSensorReading() as e and not ArmVerticalTargetReached() {
            on GyroSensorReading(angle=e.angle, acceleration=0) {
                log "ArmVerticalTargetReached from gyro sensor" at INFO;
                route ArmVerticalTargetReached();
            }
        }
    }

    /**
     * 
     */
    action startGrabberCalibration() {
        integer targetPosition := 180;
        startGrabberMovement(targetPosition);
        on GrabberTargetReached() as forwardTarget {
            log "grabber motor moved forwards" at INFO;
            on wait (1.0) { // TODO: Avoid this!
                startGrabberMovement(-targetPosition);
            }
            on GrabberTargetReached() as backwardTarget {
                log "grabber motor moved backwards" at INFO;
                integer closePosition := 0;
                // Move motor to half way between limits (fully open)
                on wait(1.0) { // TODO: Avoid this!
                    integer totalMovement := forwardTarget.steps.abs() + backwardTarget.steps.abs();
                    closePosition := totalMovement / 2;
                    startGrabberMovement(closePosition);
                }

                on GrabberTargetReached() as e {
                    log "grabber calibrated" at INFO;
                    route GrabberCalibrated(closePosition);
                }
            }
        }
    }

    /**
     *
     */
    action startGrabberMovement(integer targetPosition) {
        log "moving grabber motor to position " + targetPosition.toString();
        send StartClawMotor(targetPosition, 0.1, CHANNEL) to Constants.MOTORS_CHANNEL;

        // 0.5 second with no change in reading... stop!
        on all ClawMotorReading() as reading and not GrabberTargetReached() {
            log "got ClawMotorReading: " + reading.toString() at INFO;
            on ClawMotorReading(position=reading.position) 
                    -> ClawMotorReading(position=reading.position) within(0.5) {
                log "GrabberTargetReached from motor readings" at INFO;
                route GrabberTargetReached(reading.position);
            } // may create quite a number of listeners?
        }

        on GrabberTargetReached() {
            log "GrabberTargetReached" at INFO;
            send StopClawMotor() to Constants.MOTORS_CHANNEL;
        }
    }
}
