/*
 * Copyright (c) 2020 Software AG, Darmstadt, Germany and/or its licensors
 * 
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with the License. You may obtain a copy of the License at
 * 
 *   http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.
 */

event ColourSensorReading {
	string colour;
}

event ColourSensorChanged {
	string newColour;
}

event ArmStatus{
	boolean isInPosition;
}

monitor ColourSensor {

	string COLOUR_SENSOR_CHANNEL := "COLOUR_CHANNEL";

	string lastColour := "";
	

	action onload() {
		import "sensorPlugin" as sensorPlugin;

		monitor.subscribe(COLOUR_SENSOR_CHANNEL);
		log "ColourSensor::onload()" at INFO;

		on all ColourSensorReading() as evt {
			log evt.toString() at INFO;
			if evt.colour != lastColour {
				send ColourSensorChanged(evt.colour) to COLOUR_SENSOR_CHANNEL;
			}
			lastColour := evt.colour;
		}

		on all ColourSensorChanged() as evt {
			log evt.toString() at INFO;
		}
/* 
		on all ArmStatus(isInPosition=true) and ColourSensorReading(colour!="?")
		{
			// move biscuit
		} */

		sensorPlugin.sortBiscuits(); // infinite loop + send sensor events

	}
}

